{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Discernus Experiment Definition",
  "description": "Schema for defining a computational discourse analysis experiment.",
  "type": "object",
  "properties": {
    "experiment": {
      "type": "object",
      "description": "High-level metadata about the experiment.",
      "properties": {
        "name": { "type": "string", "description": "A unique, descriptive name for the experiment." },
        "description": { "type": "string", "description": "A brief summary of the experiment's purpose." },
        "version": { "type": "string", "pattern": "^\\d+\\.\\d+\\.\\d+$", "description": "Semantic version number for the experiment (e.g., 1.0.0)." },
        "tags": { "type": "array", "items": { "type": "string" } },
        "research_context": { "type": "string", "description": "The broader research context or question." },
        "hypotheses": { "type": "array", "items": { "type": "string" } },
        "success_criteria": { "type": "array", "items": { "type": "string" } }
      },
      "required": ["name", "description", "version"]
    },
    "components": {
      "type": "object",
      "description": "All assets required to run the experiment.",
      "properties": {
        "framework": {
          "type": "object",
          "properties": {
            "name": { "type": "string", "description": "The name of the framework directory in `/frameworks`." },
            "version": { "type": "string", "description": "The specific version of the framework to use." }
          },
          "required": ["name", "version"]
        },
        "corpus": {
          "type": "object",
          "properties": {
            "name": { "type": "string", "description": "A name for the corpus being used." },
            "path": { "type": "string", "description": "The relative path to the directory containing corpus texts." },
            "pattern": { "type": "string", "default": "*.txt", "description": "A glob pattern to match text files within the corpus path." }
          },
          "required": ["name", "path"]
        },
        "models": {
          "type": "array",
          "description": "A list of LLMs to use for the analysis.",
          "items": {
            "type": "object",
            "properties": {
              "provider": { "type": "string", "enum": ["openai", "anthropic", "google"] },
              "name": { "type": "string", "description": "The specific model name (e.g., gpt-4, claude-3-opus-20240229)." }
            },
            "required": ["provider", "name"]
          }
        },
        "prompt_template": {
          "type": "object",
          "properties": {
            "name": { "type": "string", "description": "The name of the prompt template directory." },
            "version": { "type": "string" }
          },
          "required": ["name"]
        },
        "weighting_scheme": {
          "type": "object",
          "properties": {
            "name": { "type": "string", "description": "The name of the weighting scheme." },
            "version": { "type": "string" }
          },
          "required": ["name"]
        }
      },
      "required": ["framework", "corpus", "models"]
    },
    "execution_settings": {
      "type": "object",
      "description": "Settings that control the execution of the experiment.",
      "properties": {
        "enable_qa": { "type": "boolean", "default": true, "description": "Enable the 6-layer LLM Quality Assurance system." },
        "enable_cache": { "type": "boolean", "default": true, "description": "Use cached results for identical analysis runs to save costs." },
        "max_retries": { "type": "integer", "default": 3, "description": "Number of times to retry a failed API call." }
      }
    }
  },
  "required": ["experiment", "components"]
} 