"""Initial core tables

Revision ID: a55bd593d311
Revises: 
Create Date: 2025-06-05 19:14:52.865788

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a55bd593d311'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('corpus',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('upload_timestamp', sa.DateTime(), nullable=True),
    sa.Column('record_count', sa.Integer(), nullable=True),
    sa.Column('uploader_id', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_corpus_id'), 'corpus', ['id'], unique=False)
    op.create_table('document',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('corpus_id', sa.Integer(), nullable=False),
    sa.Column('text_id', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('document_type', sa.String(length=50), nullable=False),
    sa.Column('author', sa.String(length=255), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('publication', sa.String(length=255), nullable=True),
    sa.Column('medium', sa.String(length=50), nullable=True),
    sa.Column('campaign_name', sa.String(length=255), nullable=True),
    sa.Column('audience_size', sa.Integer(), nullable=True),
    sa.Column('source_url', sa.Text(), nullable=True),
    sa.Column('schema_version', sa.String(length=20), nullable=False),
    sa.Column('document_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['corpus_id'], ['corpus.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_document_corpus_textid', 'document', ['corpus_id', 'text_id'], unique=False)
    op.create_index(op.f('ix_document_id'), 'document', ['id'], unique=False)
    op.create_index(op.f('ix_document_text_id'), 'document', ['text_id'], unique=True)
    op.create_table('job',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('corpus_id', sa.Integer(), nullable=False),
    sa.Column('job_name', sa.String(length=255), nullable=True),
    sa.Column('text_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('frameworks', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('models', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('run_count', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('total_tasks', sa.Integer(), nullable=True),
    sa.Column('completed_tasks', sa.Integer(), nullable=True),
    sa.Column('failed_tasks', sa.Integer(), nullable=True),
    sa.Column('estimated_cost', sa.Float(), nullable=True),
    sa.Column('actual_cost', sa.Float(), nullable=True),
    sa.Column('job_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['corpus_id'], ['corpus.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_job_corpus_status', 'job', ['corpus_id', 'status'], unique=False)
    op.create_index(op.f('ix_job_id'), 'job', ['id'], unique=False)
    op.create_table('chunk',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('chunk_id', sa.Integer(), nullable=False),
    sa.Column('total_chunks', sa.Integer(), nullable=False),
    sa.Column('chunk_type', sa.String(length=20), nullable=False),
    sa.Column('chunk_size', sa.Integer(), nullable=False),
    sa.Column('chunk_overlap', sa.Integer(), nullable=True),
    sa.Column('document_position', sa.Float(), nullable=False),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('unique_words', sa.Integer(), nullable=False),
    sa.Column('word_density', sa.Float(), nullable=False),
    sa.Column('chunk_content', sa.Text(), nullable=False),
    sa.Column('framework_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('processing_status', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['document.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_chunk_document_chunkid', 'chunk', ['document_id', 'chunk_id'], unique=False)
    op.create_index(op.f('ix_chunk_id'), 'chunk', ['id'], unique=False)
    op.create_table('task',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.Integer(), nullable=False),
    sa.Column('chunk_id', sa.Integer(), nullable=False),
    sa.Column('framework', sa.String(length=100), nullable=False),
    sa.Column('model', sa.String(length=100), nullable=False),
    sa.Column('run_number', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=True),
    sa.Column('max_attempts', sa.Integer(), nullable=True),
    sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('api_cost', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['chunk_id'], ['chunk.id'], ),
    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_task_chunk_framework', 'task', ['chunk_id', 'framework'], unique=False)
    op.create_index('idx_task_job_status', 'task', ['job_id', 'status'], unique=False)
    op.create_index(op.f('ix_task_id'), 'task', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_task_id'), table_name='task')
    op.drop_index('idx_task_job_status', table_name='task')
    op.drop_index('idx_task_chunk_framework', table_name='task')
    op.drop_table('task')
    op.drop_index(op.f('ix_chunk_id'), table_name='chunk')
    op.drop_index('idx_chunk_document_chunkid', table_name='chunk')
    op.drop_table('chunk')
    op.drop_index(op.f('ix_job_id'), table_name='job')
    op.drop_index('idx_job_corpus_status', table_name='job')
    op.drop_table('job')
    op.drop_index(op.f('ix_document_text_id'), table_name='document')
    op.drop_index(op.f('ix_document_id'), table_name='document')
    op.drop_index('idx_document_corpus_textid', table_name='document')
    op.drop_table('document')
    op.drop_index(op.f('ix_corpus_id'), table_name='corpus')
    op.drop_table('corpus')
    # ### end Alembic commands ###
