name: CI - Development Velocity with Python 3.13 Support

# Trigger on pushes and pull requests to maintain development velocity
on:
  push:
    branches: [ main, develop, 'feature/*', 'fix/*', 'codex/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue testing other Python versions if one fails
      matrix:
        python-version: ['3.11', '3.13']
        include:
          - python-version: '3.11'
            label: 'stable'
            required: true
          - python-version: '3.13'
            label: 'future'
            required: false  # Allow 3.13 to fail without blocking PRs initially
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true  # Important for Python 3.13
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/test_requirements.txt
    
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests on Python ${{ matrix.python-version }} (Phase 1 CI)..."
        python3 -m pytest tests/unit/ -v --tb=short --maxfail=5
    
    - name: Basic import validation
      run: |
        echo "üîç Validating core imports on Python ${{ matrix.python-version }}..."
        python3 -c "
        try:
            import src.utils.cost_manager
            import src.models.base
            import src.coordinate_engine
            print('‚úÖ Core imports successful on Python ${{ matrix.python-version }}')
        except ImportError as e:
            print(f'‚ùå Import error on Python ${{ matrix.python-version }}: {e}')
            exit(1)
        "

    - name: Python 3.13 specific tests
      if: matrix.python-version == '3.13'
      run: |
        echo "üöÄ Running Python 3.13 specific validation..."
        python3 -c "
        import sys
        print(f'‚úÖ Python version: {sys.version}')
        
        # Test new 3.13 features compatibility
        try:
            # Test that our codebase works with 3.13's improved error messages
            import src.analysis.statistics
            print('‚úÖ Framework Specification v3.1 compatible with Python 3.13')
            
            # Test scientific computing stack
            import numpy as np
            import pandas as pd
            import scipy as sp
            print(f'‚úÖ Scientific stack: NumPy {np.__version__}, Pandas {pd.__version__}, SciPy {sp.__version__}')
            
            # Test LLM clients 
            import openai
            import anthropic
            print('‚úÖ LLM API clients compatible with Python 3.13')
            
        except Exception as e:
            print(f'‚ùå Python 3.13 compatibility issue: {e}')
            exit(1)
        "
    
    - name: License compliance check
      # Only run on Python 3.11 to avoid duplicate license checks
      if: matrix.python-version == '3.11'
      run: |
        echo "üìã Checking license compliance..."
        cd product_management/license_audit
        echo "üîç Installing pip-licenses for comprehensive scanning..."
        pip install pip-licenses
        echo "üéØ Running STRICT SaaS/Commercial license compliance check..."
        if python3 compliance_checker.py --policy-file saas_commercial_policy.json; then
          echo "‚úÖ License compliance validated - Safe for SaaS/Commercial deployment"
        else
          echo "üö® CRITICAL: License compliance FAILED"
          echo "‚ùå Deployment BLOCKED due to license violations"
          echo "üîß Action required: Fix license issues before merging"
          echo ""
          echo "üìã License compliance report:"
          python3 compliance_checker.py --policy-file saas_commercial_policy.json --output-format markdown || true
          exit 1
        fi
        echo "üíæ Generating license audit trail..."
        python3 run_audit.py --output-dir ci_audit_$(date +%Y%m%d_%H%M%S) --policy-file saas_commercial_policy.json
    
    - name: Test configuration validation
      run: |
        echo "‚öôÔ∏è Validating test configuration on Python ${{ matrix.python-version }}..."
        python3 -c "
        import os
        import sys
        
        # Check test structure
        test_dirs = ['tests/unit', 'tests/integration', 'tests/utilities']
        for test_dir in test_dirs:
            if not os.path.exists(test_dir):
                print(f'‚ùå Missing test directory: {test_dir}')
                sys.exit(1)
        
        # Check requirements files
        req_files = ['requirements.txt', 'tests/test_requirements.txt']
        for req_file in req_files:
            if not os.path.exists(req_file):
                print(f'‚ùå Missing requirements file: {req_file}')
                sys.exit(1)
        
        print('‚úÖ Test configuration validated')
        "

  # Quick integration smoke test (optional, can fail without blocking)
  integration-smoke-test:
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true  # Don't block development on framework issues
    strategy:
      matrix:
        python-version: ['3.11', '3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        allow-prereleases: true
    
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/test_requirements.txt
    
    - name: Quick integration test
      run: |
        echo "üî¨ Running integration smoke test on Python ${{ matrix.python-version }}..."
        echo "‚ö†Ô∏è This test may fail due to framework documentation issues"
        echo "üéØ Goal: Catch obvious integration problems without blocking development"
        
        # Run a subset of integration tests that don't require full system health
        if python3 -m pytest tests/integration/test_api_schemas.py -v --tb=short; then
          echo "‚úÖ Integration smoke test passed on Python ${{ matrix.python-version }}"
        else
          echo "‚ö†Ô∏è Integration smoke test failed on Python ${{ matrix.python-version }} (not blocking)"
        fi

  # Summary job
  ci-summary:
    runs-on: ubuntu-latest
    needs: [test, integration-smoke-test]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "üèÅ CI Summary for Development Velocity + Python 3.13 Support"
        echo "============================================================"
        
        # Check Python 3.11 results (required)
        python311_test_result="${{ needs.test.result }}"
        if [[ "$python311_test_result" == "success" ]]; then
          echo "‚úÖ Python 3.11 Tests: PASSED (Required)"
        else
          echo "‚ùå Python 3.11 Tests: FAILED (Required)"
        fi
        
        # Check Python 3.13 results (future target)
        echo "üöÄ Python 3.13 Tests: Checked (Future compatibility)"
        
        if [ "${{ needs.integration-smoke-test.result }}" == "success" ]; then
          echo "‚úÖ Integration Smoke Tests: PASSED"
        else
          echo "‚ö†Ô∏è Integration Smoke Tests: FAILED (non-blocking)"
        fi
        
        echo ""
        echo "üìä Enhanced CI Goals:"
        echo "‚Ä¢ Fast feedback (< 8 minutes with matrix)"
        echo "‚Ä¢ Python 3.11 stability (required for merge)"
        echo "‚Ä¢ Python 3.13 future compatibility (informational)"
        echo "‚Ä¢ Catch import/syntax/compatibility errors"
        echo "‚Ä¢ Validate license compliance"
        echo "‚Ä¢ Maintain development velocity"
        echo ""
        
        if [[ "$python311_test_result" == "success" ]]; then
          echo "üéâ Development can continue - Python 3.11 core functionality validated!"
          echo "üöÄ Python 3.13 compatibility status available in detailed logs"
        else
          echo "üö® Python 3.11 tests failed - please fix before merging"
          exit 1
        fi 