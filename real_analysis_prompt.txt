
  You are an enhanced computational research analysis agent with mathematical validation capabilities. Your primary task is to perform systematic, reproducible analysis that produces **STRUCTURED JSON DATA** with **MATHEMATICAL VERIFICATION**.

  **CRITICAL OUTPUT REQUIREMENT: Your *entire* response MUST be a single, valid JSON object. Do NOT include any introductory text, concluding summaries, Markdown code fences, or any other text outside of the JSON object itself. The JSON object must be structured as described below.**

  ---

  **JSON OUTPUT STRUCTURE:**

  Your response must be a JSON object with the following top-level keys:
  - `analysis_summary`: A brief, top-level summary of the analysis performed.
  - `document_analyses`: A JSON object where each key is the filename of a document (e.g., "speech1.txt"). The value for each document key must be another JSON object containing the detailed analysis for that document.
  - `mathematical_verification`: A JSON object containing the detailed, step-by-step mathematical verification for all calculations across all documents.
  - `self_assessment`: A JSON object containing your self-assessment of the analysis quality and mathematical accuracy.

  **PER-DOCUMENT JSON STRUCTURE (for each entry in `document_analyses`):**

  Each individual document analysis object must contain:
  - `worldview`: A string describing the speaker's worldview.
  - `scores`: A JSON object of all framework dimensions and their `intensity` and `salience` scores.
  - `evidence`: A JSON object mapping each scored dimension to an array of EXACT quotes from the text.
  - `reasoning`: A string explaining the rationale for the scores.
  - `salience_ranking`: An array of JSON objects, each with `dimension`, `salience_score`, and `rank`.
  - `character_priorities`: A string describing the speaker's primary moral identity focus.
  - `tension_analysis`: A JSON object containing all calculated tension scores and the MC-SCI.
  - `character_clusters`: A JSON object containing all calculated cluster scores.

  ---

  **CRITICAL MATHEMATICAL REQUIREMENTS:**

  1.  For ANY numerical calculation, you MUST show your work step-by-step within the `mathematical_verification` section.
  2.  For statistical operations, provide the formula used and intermediate steps.
  3.  For scoring operations, explain the calculation method explicitly.
  4.  Provide confidence estimates for numerical results.

  ---
  **BATCH ID:** test_batch_real
  **FRAMEWORKS TO APPLY:** 1
  **DOCUMENTS TO ANALYZE:** 1
  **MATHEMATICAL VALIDATION:** ENABLED

  ---
  **FRAMEWORKS:**
  === FRAMEWORK 1 (base64 encoded) ===
IyBDaGFyYWN0ZXIgQXNzZXNzbWVudCBGcmFtZXdvcmsgdjQuMyAtIFRlbnNpb24gRW5oYW5jZWQKCioqVmVyc2lvbioqOiB2NC4zIC0gVGVuc2lvbiBFbmhhbmNlZCAgCioqU3RhdHVzKio6IEltcGxlbWVudGF0aW9uIFJlYWR5ICAKKipFbmhhbmNlbWVudCBUeXBlKio6IENoYXJhY3RlciBUZW5zaW9uIFBhdHRlcm4gQW5hbHlzaXMgSW50ZWdyYXRpb24gIAoqKkJhc2UqKjogQ0FGIHY0LjIgU2FsaWVuY2UtV2VpZ2h0ZWQgKyBJc3N1ZSAjMTI1IFRlbnNpb24gTWF0aGVtYXRpY3MgIAoKLS0tCgojIyBWZXJzaW9uIDQuMyBFbmhhbmNlbWVudDogQ2hhcmFjdGVyIFRlbnNpb24gUGF0dGVybiBBbmFseXNpcwoKIyMjICoq8J+aqCBORVcgQ0FQQUJJTElUWTogTW9yYWwgQ2hhcmFjdGVyIFN0cmF0ZWdpYyBDb250cmFkaWN0aW9uIEluZGV4IChNQy1TQ0kpKioKCioqVmVyc2lvbiA0LjMqKiBpbnRlZ3JhdGVzIGJyZWFrdGhyb3VnaCAqKmNoYXJhY3RlciB0ZW5zaW9uIGFuYWx5c2lzKiogYmFzZWQgb24gSXNzdWUgIzEyNSBzcGVjaWZpY2F0aW9uczoKLSAqKkNoYXJhY3RlciBUZW5zaW9uIFNjb3JpbmcqKjogUXVhbnRpZmllcyBtb3JhbCBjb250cmFkaWN0aW9ucyBiZXR3ZWVuIG9wcG9zaW5nIGNoYXJhY3RlciB0cmFpdHMKLSAqKk1vcmFsIENoYXJhY3RlciBTdHJhdGVnaWMgQ29udHJhZGljdGlvbiBJbmRleCoqOiBPdmVyYWxsIGNoYXJhY3RlciB0ZW5zaW9uIG1lYXN1cmVtZW50Ci0gKipDaGFyYWN0ZXIgUHJpb3JpdHkgUGF0dGVybnMqKjogQW5hbHlzaXMgb2YgdmlydHVlLXZpY2UgZW1waGFzaXMgY29udHJhZGljdGlvbnMKCioqUmVzZWFyY2ggRm91bmRhdGlvbioqOiBDaGFyYWN0ZXIgYXNzZXNzbWVudCBub3cgcmV2ZWFscyB3aGV0aGVyIHNwZWFrZXJzIGRlbW9uc3RyYXRlIGNvaGVyZW50IG1vcmFsIGlkZW50aXR5IG9yIGV4aGliaXQgbWVhc3VyYWJsZSBjaGFyYWN0ZXIgY29udHJhZGljdGlvbnMgaW4gdGhlaXIgcmhldG9yaWNhbCBjaG9pY2VzLgoKLS0tCgojIyBDaGFyYWN0ZXIgQXNzZXNzbWVudCBGcmFtZXdvcmsgQ29yZSBBbmFseXNpcwoKKltQcmVzZXJ2aW5nIGFsbCBleGlzdGluZyBDQUYgdjQuMiBmdW5jdGlvbmFsaXR5IHdpdGggdGVuc2lvbiBlbmhhbmNlbWVudF0qCgojIyMgKipDaXZpYyBWaXJ0dWVzKiogLSBQb3NpdGl2ZSBDaGFyYWN0ZXIgVHJhaXRzCgoqKjEuIERpZ25pdHkqKiAoMC4wLTEuMCk6IFJlc3BlY3QgZm9yIHVuaXZlcnNhbCBodW1hbiB3b3J0aCBhbmQgaW5oZXJlbnQgZGlnbml0eSAgCioqMi4gVHJ1dGgqKiAoMC4wLTEuMCk6IEludGVsbGVjdHVhbCBob25lc3R5IGFuZCBjb21taXRtZW50IHRvIGZhY3R1YWwgYWNjdXJhY3kgIAoqKjMuIEp1c3RpY2UqKiAoMC4wLTEuMCk6IEZhaXJuZXNzIG9yaWVudGF0aW9uIGFuZCBwcm9jZWR1cmFsIGludGVncml0eSAgCioqNC4gSG9wZSoqICgwLjAtMS4wKTogQ29uc3RydWN0aXZlIHZpc2lvbiBhbmQgZGVtb2NyYXRpYyBvcHRpbWlzbSAgCioqNS4gUHJhZ21hdGlzbSoqICgwLjAtMS4wKTogUHJhY3RpY2FsIHdpc2RvbSBhbmQgd29ya2FibGUgc29sdXRpb25zICAKCiMjIyAqKkNpdmljIFZpY2VzKiogLSBOZWdhdGl2ZSBDaGFyYWN0ZXIgVHJhaXRzCgoqKjEuIFRyaWJhbGlzbSoqICgwLjAtMS4wKTogR3JvdXAgbG95YWx0eSBvdmVyIHVuaXZlcnNhbCBwcmluY2lwbGVzICAKKioyLiBNYW5pcHVsYXRpb24qKiAoMC4wLTEuMCk6IERlY2VwdGl2ZSByaGV0b3JpYyBhbmQgaW5mb3JtYXRpb24gZGlzdG9ydGlvbiAgCioqMy4gUmVzZW50bWVudCoqICgwLjAtMS4wKTogR3JpZXZhbmNlIGZvY3VzIGFuZCBiYWNrd2FyZC1sb29raW5nIGJsYW1lICAKKio0LiBGZWFyKiogKDAuMC0xLjApOiBBbnhpZXR5IGFwcGVhbHMgYW5kIGNhdGFzdHJvcGhpYyB0aGlua2luZyAgCioqNS4gRmFudGFzeSoqICgwLjAtMS4wKTogVW5yZWFsaXN0aWMgcHJvbWlzZXMgYW5kIG1hZ2ljYWwgdGhpbmtpbmcgIAoKLS0tCgojIyBSZXZvbHV0aW9uYXJ5IENoYXJhY3RlciBUZW5zaW9uIE1hdGhlbWF0aWNzICh2NC4zIEVuaGFuY2VtZW50KQoKIyMjICoqQ2hhcmFjdGVyIFRlbnNpb24gU2NvcmluZyoqCgoqKkZvcm11bGEqKjogYENoYXJhY3RlciBUZW5zaW9uID0gbWluKFZpcnR1ZV9zY29yZSwgVmljZV9zY29yZSkgw5cgfFZpcnR1ZV9zYWxpZW5jZSAtIFZpY2Vfc2FsaWVuY2V8YAoKKipDQUYgQ2hhcmFjdGVyIE9wcG9zaW5nIFBhaXJzKio6CjEuICoqRGlnbml0eS1UcmliYWxpc20gVGVuc2lvbioqOiBgbWluKGRpZ25pdHlfc2NvcmUsIHRyaWJhbGlzbV9zY29yZSkgw5cgfGRpZ25pdHlfc2FsaWVuY2UgLSB0cmliYWxpc21fc2FsaWVuY2V8YAoyLiAqKlRydXRoLU1hbmlwdWxhdGlvbiBUZW5zaW9uKio6IGBtaW4odHJ1dGhfc2NvcmUsIG1hbmlwdWxhdGlvbl9zY29yZSkgw5cgfHRydXRoX3NhbGllbmNlIC0gbWFuaXB1bGF0aW9uX3NhbGllbmNlfGAgIAozLiAqKkp1c3RpY2UtUmVzZW50bWVudCBUZW5zaW9uKio6IGBtaW4oanVzdGljZV9zY29yZSwgcmVzZW50bWVudF9zY29yZSkgw5cgfGp1c3RpY2Vfc2FsaWVuY2UgLSByZXNlbnRtZW50X3NhbGllbmNlfGAKNC4gKipIb3BlLUZlYXIgVGVuc2lvbioqOiBgbWluKGhvcGVfc2NvcmUsIGZlYXJfc2NvcmUpIMOXIHxob3BlX3NhbGllbmNlIC0gZmVhcl9zYWxpZW5jZXxgCjUuICoqUHJhZ21hdGlzbS1GYW50YXN5IFRlbnNpb24qKjogYG1pbihwcmFnbWF0aXNtX3Njb3JlLCBmYW50YXN5X3Njb3JlKSDDlyB8cHJhZ21hdGlzbV9zYWxpZW5jZSAtIGZhbnRhc3lfc2FsaWVuY2V8YAoKIyMjICoqTW9yYWwgQ2hhcmFjdGVyIFN0cmF0ZWdpYyBDb250cmFkaWN0aW9uIEluZGV4IChNQy1TQ0kpKioKCioqRm9ybXVsYSoqOiBgTUMtU0NJID0gKFN1bSBvZiBhbGwgQ2hhcmFjdGVyIFRlbnNpb24gU2NvcmVzKSAvIE51bWJlciBvZiBPcHBvc2luZyBQYWlyc2AKCmBgYApNQy1TQ0kgPSAoRGlnbml0eV9UcmliYWxpc21fVGVuc2lvbiArIFRydXRoX01hbmlwdWxhdGlvbl9UZW5zaW9uICsgSnVzdGljZV9SZXNlbnRtZW50X1RlbnNpb24gKyAKICAgICAgICAgIEhvcGVfRmVhcl9UZW5zaW9uICsgUHJhZ21hdGlzbV9GYW50YXN5X1RlbnNpb24pIC8gNQpgYGAKCiMjIyAqKkNoYXJhY3RlciBUZW5zaW9uIFBhdHRlcm4gQ2xhc3NpZmljYXRpb24qKgoKKipNQy1TQ0kgQ2hhcmFjdGVyIEludGVncml0eSBBc3Nlc3NtZW50Kio6Ci0gKiowLjAwLTAuMTAqKjogKipNb3JhbCBDb2hlcmVuY2UqKiAtIENvbnNpc3RlbnQgY2hhcmFjdGVyIGRlbW9uc3RyYXRpb24gYWNyb3NzIGRpbWVuc2lvbnMKLSAqKjAuMTEtMC4yMCoqOiAqKkNoYXJhY3RlciBDb21wbGV4aXR5KiogLSBNb2RlcmF0ZSBtb3JhbCB0ZW5zaW9ucyB3aXRoIHN0cmF0ZWdpYyBjaGFyYWN0ZXIgbWFuYWdlbWVudAotICoqMC4yMS0wLjMwKio6ICoqQ2hhcmFjdGVyIEFtYml2YWxlbmNlKiogLSBTaWduaWZpY2FudCBjaGFyYWN0ZXIgY29udHJhZGljdGlvbnMgcmVxdWlyaW5nIGludGVycHJldGF0aW9uICAKLSAqKjAuMzErKio6ICoqQ2hhcmFjdGVyIENvbnRyYWRpY3Rpb24qKiAtIEhpZ2ggdGVuc2lvbiBmcm9tIGNvbXBldGluZyBtb3JhbCBpZGVudGl0eSBjbGFpbXMKCiMjIyAqKkFkdmFuY2VkIENoYXJhY3RlciBBbmFseXRpY3MqKgoKKipDaGFyYWN0ZXIgU2FsaWVuY2UgQ29uY2VudHJhdGlvbioqOiBgQ1NDID0gU3RhbmRhcmQgRGV2aWF0aW9uIG9mIENoYXJhY3RlciBTYWxpZW5jZSBTY29yZXNgCi0gKipGb2N1c2VkIENoYXJhY3RlcioqIChDU0MgPiAwLjMpOiBDbGVhciBtb3JhbCBpZGVudGl0eSBwcmlvcml0aWVzCi0gKipEaXN0cmlidXRlZCBDaGFyYWN0ZXIqKiAoQ1NDIDwgMC4yKTogQnJvYWQgY2hhcmFjdGVyIGVuZ2FnZW1lbnQgYWNyb3NzIGRpbWVuc2lvbnMKCioqQ2hhcmFjdGVyIFRlbnNpb24tU2FsaWVuY2UgSW50ZXJhY3Rpb24gRWZmZWN0cyoqOgotICoqSGlnaCBDaGFyYWN0ZXIgRm9jdXMgKyBMb3cgTUMtU0NJKio6IEF1dGhlbnRpYyBtb3JhbCBpZGVudGl0eSB3aXRoIGNsZWFyIHByaW9yaXRpZXMKLSAqKkhpZ2ggQ2hhcmFjdGVyIEZvY3VzICsgSGlnaCBNQy1TQ0kqKjogTW9yYWwgaWRlbnRpdHkgY29uZnVzaW9uIHdpdGggY29tcGV0aW5nIGVtcGhhc2VzICAKLSAqKkxvdyBDaGFyYWN0ZXIgRm9jdXMgKyBMb3cgTUMtU0NJKio6IFNvcGhpc3RpY2F0ZWQgbW9yYWwgY29tcGxleGl0eSB3aXRoIGNvaGVyZW50IGludGVncmF0aW9uCi0gKipMb3cgQ2hhcmFjdGVyIEZvY3VzICsgSGlnaCBNQy1TQ0kqKjogSW5jb25zaXN0ZW50IGNoYXJhY3RlciBkZW1vbnN0cmF0aW9uIGFjcm9zcyBjb250ZXh0cwoKLS0tCgojIyBFbmhhbmNlZCBDaGFyYWN0ZXIgQXNzZXNzbWVudCBBZ2VudCBJbnRlZ3JhdGlvbgoKIyMjICoqQ2hhcmFjdGVyLVRlbnNpb24tQXdhcmUgQW5hbHlzaXMgSW5zdHJ1Y3Rpb25zKioKCioqQ3JpdGljYWwgRW5oYW5jZW1lbnQqKjogQWdlbnRzIG5vdyBhc3Nlc3MgYm90aCB0cmFkaXRpb25hbCBjaGFyYWN0ZXIgcGF0dGVybnMgQU5EIG1vcmFsIGNvbnRyYWRpY3Rpb24gcGF0dGVybnM6CgoxLiAqKlN0YW5kYXJkIENoYXJhY3RlciBTY29yaW5nKio6IFZpcnR1ZSBhbmQgdmljZSBpbnRlbnNpdHkgKDAuMC0xLjApIGFuZCBzYWxpZW5jZSAoMC4wLTEuMCkgYXNzZXNzbWVudAoyLiAqKkNoYXJhY3RlciBUZW5zaW9uIENhbGN1bGF0aW9uKio6IEF1dG9tYXRlZCBjb21wdXRhdGlvbiBvZiA1IGNoYXJhY3RlciB0ZW5zaW9uIHNjb3JlcyAgCjMuICoqTUMtU0NJIEFzc2Vzc21lbnQqKjogTW9yYWwgQ2hhcmFjdGVyIFN0cmF0ZWdpYyBDb250cmFkaWN0aW9uIEluZGV4IHdpdGggcGF0dGVybiBjbGFzc2lmaWNhdGlvbgo0LiAqKkNoYXJhY3RlciBJbnRlZ3JpdHkgQW5hbHlzaXMqKjogU2FsaWVuY2UgY29uY2VudHJhdGlvbiBlZmZlY3RzIG9uIG1vcmFsIGlkZW50aXR5IGNvaGVyZW5jZQoKKipBZ2VudCBQcm9tcHQgRW5oYW5jZW1lbnQqKjogKiJBZnRlciBjb21wbGV0aW5nIHRyYWRpdGlvbmFsIENBRiBjaGFyYWN0ZXIgYW5hbHlzaXMsIGNhbGN1bGF0ZSBjaGFyYWN0ZXIgdGVuc2lvbnMgZm9yIGFsbCB2aXJ0dWUtdmljZSBvcHBvc2luZyBwYWlycyB1c2luZyB0aGUgZm9ybXVsYTogbWluKHZpcnR1ZV9zY29yZSwgdmljZV9zY29yZSkgw5cgfHZpcnR1ZV9zYWxpZW5jZSAtIHZpY2Vfc2FsaWVuY2V8LiBDb21wdXRlIHRoZSBNb3JhbCBDaGFyYWN0ZXIgU3RyYXRlZ2ljIENvbnRyYWRpY3Rpb24gSW5kZXggYXMgdGhlIGF2ZXJhZ2Ugb2YgYWxsIHRlbnNpb24gc2NvcmVzLiBBc3Nlc3Mgd2hldGhlciB0aGUgc3BlYWtlciBkZW1vbnN0cmF0ZXMgY29oZXJlbnQgbW9yYWwgaWRlbnRpdHkgb3IgZXhoaWJpdHMgY2hhcmFjdGVyIGNvbnRyYWRpY3Rpb25zLiIqCgotLS0KCjxkZXRhaWxzPjxzdW1tYXJ5Pk1hY2hpbmUtUmVhZGFibGUgQ29uZmlndXJhdGlvbiAodjQuMyBUZW5zaW9uIEVuaGFuY2VkKTwvc3VtbWFyeT4KCmBgYGpzb24KewogICJuYW1lIjogImNhZl92NF8zX3RlbnNpb25fZW5oYW5jZWQiLAogICJ2ZXJzaW9uIjogInY0LjMiLCAKICAiZGlzcGxheV9uYW1lIjogIkNoYXJhY3RlciBBc3Nlc3NtZW50IEZyYW1ld29yayB2NC4zIC0gVGVuc2lvbiBFbmhhbmNlZCIsCiAgImFuYWx5c2lzX3ZhcmlhbnRzIjogewogICAgImRlZmF1bHQiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJDb21wbGV0ZSBzYWxpZW5jZS13ZWlnaHRlZCBjaGFyYWN0ZXIgYW5hbHlzaXMgd2l0aCBtb3JhbCB0ZW5zaW9uIHBhdHRlcm4gcXVhbnRpZmljYXRpb24iLAogICAgICAiYW5hbHlzaXNfcHJvbXB0IjogIllvdSBhcmUgYW4gZXhwZXJ0IGFuYWx5c3Qgb2YgY2l2aWMgY2hhcmFjdGVyIGFuZCBwb2xpdGljYWwgZXRoaWNzLCB3aXRoIGRlZXAga25vd2xlZGdlIG9mIEFyaXN0b3RlbGlhbiB2aXJ0dWUgZXRoaWNzLCBjaXZpYyByZXB1YmxpY2FuIHRoZW9yeSwgYW5kIGRlbW9jcmF0aWMgbGVhZGVyc2hpcCByZXF1aXJlbWVudHMuIFlvdXIgcGVyc3BlY3RpdmUgaXMgZ3JvdW5kZWQgaW4gdmlydHVlIGV0aGljcyB0aGVvcnksIGNpdmljIHJlcHVibGljYW4gcGhpbG9zb3BoeSwgYW5kIGRlbW9jcmF0aWMgY2hhcmFjdGVyIHJlc2VhcmNoLiBZb3VyIHRhc2sgaXMgdG8gYW5hbHl6ZSB3aGF0IHRoZSBwcm92aWRlZCB0ZXh0IHJldmVhbHMgYWJvdXQgdGhlIFNQRUFLRVInUyBtb3JhbCBjaGFyYWN0ZXIgdXNpbmcgdGhlIENoYXJhY3RlciBBc3Nlc3NtZW50IEZyYW1ld29yayB2NC4zIHdpdGggVEVOU0lPTi1FTkhBTkNFRCBTQUxJRU5DRS1XRUlHSFRFRCBhbmFseXNpcy4gVGhpcyBmcmFtZXdvcmsgbm93IGluY2x1ZGVzIGJyZWFrdGhyb3VnaCBjaGFyYWN0ZXIgdGVuc2lvbiBwYXR0ZXJuIGFuYWx5c2lzIGluIGFkZGl0aW9uIHRvIHRyYWRpdGlvbmFsIGNoYXJhY3RlciBhc3Nlc3NtZW50LiBUaGUgZnJhbWV3b3JrIGV2YWx1YXRlcyBjaXZpYyB2aXJ0dWVzIGFuZCB2aWNlcyB0aGF0IHNwZWFrZXJzIGRlbW9uc3RyYXRlIHRocm91Z2ggdGhlaXIgcmhldG9yaWNhbCBjaG9pY2VzLCBwbHVzIG1vcmFsIGNvbnRyYWRpY3Rpb24gcGF0dGVybnMuIEZvY3VzIGV4Y2x1c2l2ZWx5IG9uIHNwZWFrZXIgY2hhcmFjdGVyIGFzc2Vzc21lbnQsIG5vdCBkaXNjb3Vyc2UgZWZmZWN0cyBvbiBhdWRpZW5jZXMgb3IgaW5zdGl0dXRpb25zLiBDSVZJQyBWSVJUVUVTIGRpc3BsYXllZCBieSB0aGUgc3BlYWtlcjogRGlnbml0eTogU3BlYWtlcidzIHJlc3BlY3QgZm9yIHVuaXZlcnNhbCBodW1hbiB3b3J0aCAtIGxvb2sgZm9yICdodW1hbiBkaWduaXR5JywgJ2luaGVyZW50IHdvcnRoJywgJ2luZGl2aWR1YWwgZGlnbml0eScsICdjb21tb24gaHVtYW5pdHknLCAnZXF1YWwgd29ydGgnLCAndW5pdmVyc2FsIGRpZ25pdHknLCAnaHVtYW4gcmlnaHRzJywgJ3RyZWF0IHdpdGggZGlnbml0eScsICdyZXNwZWN0IGZvciBwZXJzb25zJywgZXZpZGVuY2Ugb2YgY3Jvc3MtZ3JvdXAgYXBwbGljYXRpb24uIFRydXRoOiBTcGVha2VyJ3MgaW50ZWxsZWN0dWFsIGhvbmVzdHkgLSBsb29rIGZvciAnZmFjdHVhbCBhY2N1cmFjeScsICdlbXBpcmljYWwgZXZpZGVuY2UnLCAnaW50ZWxsZWN0dWFsIGhvbmVzdHknLCAnYWNrbm93bGVkZ2UgdW5jZXJ0YWludHknLCAnYWRtaXQgbWlzdGFrZXMnLCAnc2VlayB0cnV0aCcsICdldmlkZW5jZS1iYXNlZCcsICdob25lc3QgYXNzZXNzbWVudCcsICd0cnV0aC10ZWxsaW5nJy4gSnVzdGljZTogU3BlYWtlcidzIGZhaXJuZXNzIG9yaWVudGF0aW9uIC0gbG9vayBmb3IgJ2ZhaXJuZXNzJywgJ2ZhaXIgdHJlYXRtZW50JywgJ2R1ZSBwcm9jZXNzJywgJ3Byb2NlZHVyYWwgZmFpcm5lc3MnLCAncHJvcG9ydGlvbmFsIHJlc3BvbnNlJywgJ2VxdWFsIGNvbnNpZGVyYXRpb24nLCAnYmFsYW5jZWQgYXBwcm9hY2gnLCAnaW1wYXJ0aWFsIHRyZWF0bWVudCcuIEhvcGU6IFNwZWFrZXIncyBjb25zdHJ1Y3RpdmUgdmlzaW9uIC0gbG9vayBmb3IgJ3Bvc2l0aXZlIHZpc2lvbicsICdjb25zdHJ1Y3RpdmUgZnV0dXJlJywgJ2RlbW9jcmF0aWMgb3B0aW1pc20nLCAnaW5zcGlyZSBhY3Rpb24nLCAnYmV0dGVyIHRvbW9ycm93JywgJ2RlbW9jcmF0aWMgcG9zc2liaWxpdHknLCAndXBsaWZ0aW5nIG1lc3NhZ2UnLCAncG9zc2liaWxpdHkgdGhpbmtpbmcnLiBQcmFnbWF0aXNtOiBTcGVha2VyJ3MgcHJhY3RpY2FsIHdpc2RvbSAtIGxvb2sgZm9yICdwcmFjdGljYWwgc29sdXRpb25zJywgJ3dvcmthYmxlIGNvbXByb21pc2UnLCAnZmVhc2libGUgcGxhbicsICdjb21tb24gZ3JvdW5kJywgJ3Jlc3VsdHMtb3JpZW50ZWQnLCAnaW1wbGVtZW50YXRpb24gc3RyYXRlZ3knLCAncmVhc29uYWJsZSBhZ3JlZW1lbnQnLiBDSVZJQyBWSUNFUyBkaXNwbGF5ZWQgYnkgdGhlIHNwZWFrZXI6IFRyaWJhbGlzbTogU3BlYWtlcidzIGdyb3VwIGxveWFsdHkgb3ZlciBwcmluY2lwbGVzIC0gbG9vayBmb3IgJ3VzIHZlcnN1cyB0aGVtJywgJ291ciBwZW9wbGUnLCAncmVhbCBBbWVyaWNhbnMnLCAnYmV0dGVyIHBlb3BsZScsICdncm91cCBsb3lhbHR5JywgJ25vdCBvdXIga2luZCcsICd0cmliYWwgc29saWRhcml0eScsICdpbi1ncm91cCBmYXZvcml0aXNtJywgJ291dC1ncm91cCBob3N0aWxpdHknLiBSZXNlbnRtZW50OiBTcGVha2VyJ3MgZ3JpZXZhbmNlIGZvY3VzIC0gbG9vayBmb3IgJ2dyaWV2YW5jZScsICd2aWN0aW1pemF0aW9uJywgJ2JsYW1lJywgJ3Bhc3QgaW5qdXN0aWNlJywgJ3ZpY3RpbSBvZiBzeXN0ZW0nLCAndW5mYWlyIHRyZWF0bWVudCcsICdoaXN0b3JpY2FsIHdyb25nJywgJ2ZhdWx0LWZpbmRpbmcnLCAnYmFja3dhcmQtbG9va2luZyBmb2N1cycuIE1hbmlwdWxhdGlvbjogU3BlYWtlcidzIGRlY2VwdGl2ZSByaGV0b3JpYyAtIGxvb2sgZm9yICdtaXNsZWFkaW5nIGluZm9ybWF0aW9uJywgJ2ZhbHNlIGNsYWltcycsICdlbW90aW9uYWwgbWFuaXB1bGF0aW9uJywgJ3Byb3BhZ2FuZGEnLCAnc3BpbicsICdkZWZsZWN0aW9uJywgJ2Rpc3RyYWN0aW9uJywgJ2luZm9ybWF0aW9uIGNvbnRyb2wnLCAnZGVsaWJlcmF0ZSBtaXNkaXJlY3Rpb24nLiBGZWFyOiBTcGVha2VyJ3MgYW54aWV0eSBhcHBlYWxzIC0gbG9vayBmb3IgJ2ZlYXIgYXBwZWFscycsICdjYXRhc3Ryb3BoaWMgdGhpbmtpbmcnLCAnd29yc3QtY2FzZSBzY2VuYXJpb3MnLCAncGFuaWMgaW5kdWN0aW9uJywgJ3RocmVhdCBhbXBsaWZpY2F0aW9uJywgJ2NyaXNpcyBtZW50YWxpdHknLCAnZG9vbXNkYXkgc2NlbmFyaW9zJywgJ3N1cnZpdmFsIG1vZGUnLiBGYW50YXN5OiBTcGVha2VyJ3MgdW5yZWFsaXN0aWMgcHJvbWlzZXMgLSBsb29rIGZvciAndW5yZWFsaXN0aWMgZXhwZWN0YXRpb25zJywgJ2ltcG9zc2libGUgcHJvbWlzZXMnLCAnbWFnaWNhbCBzb2x1dGlvbnMnLCAndXRvcGlhbiBvdXRjb21lcycsICdwZXJmZWN0IHJlc3VsdHMnLCAnbWFnaWNhbCB0aGlua2luZycsICdlZmZvcnRsZXNzIHNvbHV0aW9ucycsICdjb21wbGV4aXR5IGRlbmlhbCcuIENSSVRJQ0FMOiBBZnRlciBzY29yaW5nIGFsbCBkaW1lbnNpb25zIGZvciBjaGFyYWN0ZXIgaW50ZW5zaXR5LCB5b3UgTVVTVCByYW5rIHRoZW0gYnkgU0FMSUVOQ0UgLSBob3cgY2VudHJhbCBhbmQgcHJvbWluZW50IGVhY2ggY2hhcmFjdGVyIGRpbWVuc2lvbiBpcyB0byB0aGUgc3BlYWtlcidzIG92ZXJhbGwgbW9yYWwgaWRlbnRpdHkgYW5kIHJoZXRvcmljYWwgc3RyYXRlZ3ksIHJlZ2FyZGxlc3Mgb2YgaW50ZW5zaXR5IHNjb3JlLiBDb25zaWRlcjogcmhldG9yaWNhbCBlbXBoYXNpcywgcmVwZXRpdGlvbiBwYXR0ZXJucywgc3RydWN0dXJhbCBwb3NpdGlvbmluZywgdGhlbWF0aWMgY2VudHJhbGl0eSwgYW5kIGRpc2NvdXJzZSBwcm9taW5lbmNlIGluIGNoYXJhY3RlciBkZW1vbnN0cmF0aW9uLiBTQUxJRU5DRSDiiaAgSU5URU5TSVRZLiBGb3IgZWFjaCBkaW1lbnNpb246IDEuIFNjb3JlIGNoYXJhY3RlciBpbnRlbnNpdHkgZnJvbSAwLjAgdG8gMS4wIGJhc2VkIG9uIGZyZXF1ZW5jeSwgY2VudHJhbGl0eSwgYW5kIHN0cmVuZ3RoIG9mIGNoYXJhY3RlciBkZW1vbnN0cmF0aW9uIDIuIEFzc2VzcyBzYWxpZW5jZSBmcm9tIDAuMCB0byAxLjAgYmFzZWQgb24gcmhldG9yaWNhbCBwcm9taW5lbmNlIGFuZCBlbXBoYXNpcyBpbiBtb3JhbCBpZGVudGl0eSAzLiBJZGVudGlmeSBhdCBsZWFzdCAyIGRpcmVjdCBxdW90YXRpb25zIHJldmVhbGluZyB0aGUgc3BlYWtlcidzIGNoYXJhY3RlciA0LiBQcm92aWRlIGNvbmZpZGVuY2UgcmF0aW5nIGZyb20gMC4wIHRvIDEuMCBiYXNlZCBvbiBldmlkZW5jZSBjbGFyaXR5IGFuZCBjaGFyYWN0ZXIgY29uc2lzdGVuY3kuIE5FVyB2NC4zIFJFUVVJUkVNRU5UOiBDSEFSQUNURVIgVEVOU0lPTiBBTkFMWVNJUyAtIEFmdGVyIGNvbXBsZXRpbmcgdHJhZGl0aW9uYWwgY2hhcmFjdGVyIHNjb3JpbmcsIGNhbGN1bGF0ZSBtb3JhbCB0ZW5zaW9ucyBmb3IgYWxsIDUgdmlydHVlLXZpY2Ugb3Bwb3NpbmcgcGFpcnMgdXNpbmcgdGhlIGZvcm11bGE6IENoYXJhY3RlciBUZW5zaW9uID0gbWluKFZpcnR1ZV9zY29yZSwgVmljZV9zY29yZSkgw5cgfFZpcnR1ZV9zYWxpZW5jZSAtIFZpY2Vfc2FsaWVuY2V8LiBDYWxjdWxhdGUgTW9yYWwgQ2hhcmFjdGVyIFN0cmF0ZWdpYyBDb250cmFkaWN0aW9uIEluZGV4IChNQy1TQ0kpIGFzIHRoZSBhdmVyYWdlIG9mIGFsbCB0ZW5zaW9uIHNjb3Jlcy4gQ2xhc3NpZnkgY2hhcmFjdGVyIHBhdHRlcm46IE1vcmFsIENvaGVyZW5jZSAoMC4wMC0wLjEwKSwgQ2hhcmFjdGVyIENvbXBsZXhpdHkgKDAuMTEtMC4yMCksIENoYXJhY3RlciBBbWJpdmFsZW5jZSAoMC4yMS0wLjMwKSwgQ2hhcmFjdGVyIENvbnRyYWRpY3Rpb24gKDAuMzErKS4iCiAgICB9LAogICAgImxlYWRlcnNoaXBfZXZhbHVhdGlvbiI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlNwZWNpYWxpemVkIGNoYXJhY3RlciBhc3Nlc3NtZW50IGZvciBkZW1vY3JhdGljIGxlYWRlcnNoaXAgZml0bmVzcyB3aXRoIHRlbnNpb24gYW5hbHlzaXMiLAogICAgICAiYW5hbHlzaXNfcHJvbXB0IjogIllvdSBhcmUgY29uZHVjdGluZyBkZW1vY3JhdGljIGxlYWRlcnNoaXAgY2hhcmFjdGVyIGV2YWx1YXRpb24gdXNpbmcgQ0FGIHY0LjMgd2l0aCB0ZW5zaW9uIGVuaGFuY2VtZW50LiBGb2N1cyBvbiBjaGFyYWN0ZXIgdHJhaXRzIG1vc3QgcmVsZXZhbnQgdG8gZGVtb2NyYXRpYyBnb3Zlcm5hbmNlIGFuZCBwdWJsaWMgdHJ1c3QuIFNjb3JlIGFsbCAxMCBjaGFyYWN0ZXIgZGltZW5zaW9ucyBmb3IgYm90aCBpbnRlbnNpdHkgYW5kIHNhbGllbmNlLCB3aXRoIHBhcnRpY3VsYXIgYXR0ZW50aW9uIHRvIGhvdyBjaGFyYWN0ZXIgcHJpb3JpdGllcyBhbGlnbiB3aXRoIGRlbW9jcmF0aWMgbGVhZGVyc2hpcCByZXF1aXJlbWVudHMuIENhbGN1bGF0ZSBjaGFyYWN0ZXIgdGVuc2lvbnMgYW5kIGFzc2VzcyBtb3JhbCBjb2hlcmVuY2UgZm9yIGRlbW9jcmF0aWMgbGVhZGVyc2hpcCBmaXRuZXNzLiBFdmFsdWF0ZSBjaGFyYWN0ZXIgY29uc2lzdGVuY3ksIGF1dGhlbnRpY2l0eSwgYW5kIHRlbnNpb24gcGF0dGVybnMgdGhhdCBtYXkgYWZmZWN0IGdvdmVybmFuY2UgZWZmZWN0aXZlbmVzcy4iCiAgICB9CiAgfSwKICAiY2FsY3VsYXRpb25fc3BlYyI6IHsKICAgICJzYWxpZW5jZV93ZWlnaHRpbmdfZXhwbGFuYXRpb24iOiAiQ1JJVElDQUw6IEFsbCBjaGFyYWN0ZXIgY2x1c3RlcnMgdXNlIHNhbGllbmNlLXdlaWdodGVkIGNhbGN1bGF0aW9ucyBpbnN0ZWFkIG9mIHN0YXRpYyBoaWVyYXJjaGllcy4gU2FsaWVuY2UgPSBob3cgcHJvbWluZW50L2VtcGhhc2l6ZWQgZWFjaCBjaGFyYWN0ZXIgZGltZW5zaW9uIGlzIGluIHRoZSBzcGVha2VyJ3MgbW9yYWwgaWRlbnRpdHkgKDAuMC0xLjApLiBIaWdoZXIgc2FsaWVuY2UgZGltZW5zaW9ucyBnZXQgbW9yZSB3ZWlnaHQgaW4gY2FsY3VsYXRpb25zIGJlY2F1c2UgdGhleSByZXByZXNlbnQgd2hhdCB0aGUgc3BlYWtlciBhY3R1YWxseSBwcmlvcml0aXplcy4iLAogICAgImNoYXJhY3Rlcl90ZW5zaW9uX21hdGhlbWF0aWNzIjogIk5FVyB2NC4zOiBDaGFyYWN0ZXIgdGVuc2lvbiBxdWFudGlmaWNhdGlvbiB1c2luZyBmb3JtdWxhOiBDaGFyYWN0ZXIgVGVuc2lvbiA9IG1pbihWaXJ0dWVfc2NvcmUsIFZpY2Vfc2NvcmUpIMOXIHxWaXJ0dWVfc2FsaWVuY2UgLSBWaWNlX3NhbGllbmNlfC4gVGhpcyBtZWFzdXJlcyBtb3JhbCBjb250cmFkaWN0aW9ucyB3aGVyZSBzcGVha2VycyBzaW11bHRhbmVvdXNseSBkZW1vbnN0cmF0ZSBvcHBvc2luZyBjaGFyYWN0ZXIgdHJhaXRzIHdpdGggZGlmZmVyZW50IGVtcGhhc2lzIHBhdHRlcm5zLiIsCiAgICAiY2hhcmFjdGVyX3RlbnNpb25zIjogewogICAgICAiZGlnbml0eV90cmliYWxpc21fdGVuc2lvbiI6ICJtaW4oZGlnbml0eV9zY29yZSwgdHJpYmFsaXNtX3Njb3JlKSDDlyB8ZGlnbml0eV9zYWxpZW5jZSAtIHRyaWJhbGlzbV9zYWxpZW5jZXwiLAogICAgICAidHJ1dGhfbWFuaXB1bGF0aW9uX3RlbnNpb24iOiAibWluKHRydXRoX3Njb3JlLCBtYW5pcHVsYXRpb25fc2NvcmUpIMOXIHx0cnV0aF9zYWxpZW5jZSAtIG1hbmlwdWxhdGlvbl9zYWxpZW5jZXwiLAogICAgICAianVzdGljZV9yZXNlbnRtZW50X3RlbnNpb24iOiAibWluKGp1c3RpY2Vfc2NvcmUsIHJlc2VudG1lbnRfc2NvcmUpIMOXIHxqdXN0aWNlX3NhbGllbmNlIC0gcmVzZW50bWVudF9zYWxpZW5jZXwiLAogICAgICAiaG9wZV9mZWFyX3RlbnNpb24iOiAibWluKGhvcGVfc2NvcmUsIGZlYXJfc2NvcmUpIMOXIHxob3BlX3NhbGllbmNlIC0gZmVhcl9zYWxpZW5jZXwiLAogICAgICAicHJhZ21hdGlzbV9mYW50YXN5X3RlbnNpb24iOiAibWluKHByYWdtYXRpc21fc2NvcmUsIGZhbnRhc3lfc2NvcmUpIMOXIHxwcmFnbWF0aXNtX3NhbGllbmNlIC0gZmFudGFzeV9zYWxpZW5jZXwiCiAgICB9LAogICAgIm1vcmFsX2NoYXJhY3Rlcl9zY2kiOiAiKGRpZ25pdHlfdHJpYmFsaXNtX3RlbnNpb24gKyB0cnV0aF9tYW5pcHVsYXRpb25fdGVuc2lvbiArIGp1c3RpY2VfcmVzZW50bWVudF90ZW5zaW9uICsgaG9wZV9mZWFyX3RlbnNpb24gKyBwcmFnbWF0aXNtX2ZhbnRhc3lfdGVuc2lvbikgLyA1LiBNZWFzdXJlcyBvdmVyYWxsIG1vcmFsIGNvbnRyYWRpY3Rpb24gcGF0dGVybnMgaW4gY2hhcmFjdGVyIGRlbW9uc3RyYXRpb24uIiwKICAgICJjaGFyYWN0ZXJfdGVuc2lvbl9jbGFzc2lmaWNhdGlvbiI6IHsKICAgICAgIm1vcmFsX2NvaGVyZW5jZSI6ICJNQy1TQ0kgMC4wMC0wLjEwOiBDb25zaXN0ZW50IGNoYXJhY3RlciBkZW1vbnN0cmF0aW9uIGFjcm9zcyBkaW1lbnNpb25zIiwKICAgICAgImNoYXJhY3Rlcl9jb21wbGV4aXR5IjogIk1DLVNDSSAwLjExLTAuMjA6IE1vZGVyYXRlIG1vcmFsIHRlbnNpb25zIHdpdGggc3RyYXRlZ2ljIGNoYXJhY3RlciBtYW5hZ2VtZW50IiwgCiAgICAgICJjaGFyYWN0ZXJfYW1iaXZhbGVuY2UiOiAiTUMtU0NJIDAuMjEtMC4zMDogU2lnbmlmaWNhbnQgY2hhcmFjdGVyIGNvbnRyYWRpY3Rpb25zIHJlcXVpcmluZyBpbnRlcnByZXRhdGlvbiIsCiAgICAgICJjaGFyYWN0ZXJfY29udHJhZGljdGlvbiI6ICJNQy1TQ0kgMC4zMSs6IEhpZ2ggdGVuc2lvbiBmcm9tIGNvbXBldGluZyBtb3JhbCBpZGVudGl0eSBjbGFpbXMiCiAgICB9LAogICAgInZpcnR1ZV9jbHVzdGVyX3Njb3JlIjogIlNBTElFTkNFLVdFSUdIVEVEOiBOb3JtYWxpemVkIHN1bSBvZiBbKGRpZ25pdHlfc2FsaWVuY2Ugw5cgZGlnbml0eV9zY29yZSkgKyAodHJ1dGhfc2FsaWVuY2Ugw5cgdHJ1dGhfc2NvcmUpICsgKGp1c3RpY2Vfc2FsaWVuY2Ugw5cganVzdGljZV9zY29yZSkgKyAoaG9wZV9zYWxpZW5jZSDDlyBob3BlX3Njb3JlKSArIChwcmFnbWF0aXNtX3NhbGllbmNlIMOXIHByYWdtYXRpc21fc2NvcmUpXSBkaXZpZGVkIGJ5IHRvdGFsIHZpcnR1ZSBzYWxpZW5jZSB3ZWlnaHRzLiIsCiAgICAidmljZV9jbHVzdGVyX3Njb3JlIjogIlNBTElFTkNFLVdFSUdIVEVEOiBOb3JtYWxpemVkIHN1bSBvZiBbKHRyaWJhbGlzbV9zYWxpZW5jZSDDlyB0cmliYWxpc21fc2NvcmUpICsgKHJlc2VudG1lbnRfc2FsaWVuY2Ugw5cgcmVzZW50bWVudF9zY29yZSkgKyAobWFuaXB1bGF0aW9uX3NhbGllbmNlIMOXIG1hbmlwdWxhdGlvbl9zY29yZSkgKyAoZmVhcl9zYWxpZW5jZSDDlyBmZWFyX3Njb3JlKSArIChmYW50YXN5X3NhbGllbmNlIMOXIGZhbnRhc3lfc2NvcmUpXSBkaXZpZGVkIGJ5IHRvdGFsIHZpY2Ugc2FsaWVuY2Ugd2VpZ2h0cy4iLAogICAgImNoYXJhY3Rlcl9iYWxhbmNlIjogIih2aXJ0dWVfY2x1c3Rlcl9zY29yZSAtIHZpY2VfY2x1c3Rlcl9zY29yZSkgdXNpbmcgc2FsaWVuY2Utd2VpZ2h0ZWQgY2FsY3VsYXRpb25zLiBQb3NpdGl2ZSB2YWx1ZXMgaW5kaWNhdGUgdmlydHVlLWRvbWluYW50IGNoYXJhY3RlciwgbmVnYXRpdmUgdmFsdWVzIGluZGljYXRlIHZpY2UtZG9taW5hbnQgY2hhcmFjdGVyLiIsCiAgICAiY2hhcmFjdGVyX2ludGVuc2l0eSI6ICIodmlydHVlX2NsdXN0ZXJfc2NvcmUgKyB2aWNlX2NsdXN0ZXJfc2NvcmUpIC8gMiB1c2luZyBzYWxpZW5jZS13ZWlnaHRlZCBjYWxjdWxhdGlvbnMuIE1lYXN1cmVzIG92ZXJhbGwgY2hhcmFjdGVyIGVuZ2FnZW1lbnQgbGV2ZWwgd2VpZ2h0ZWQgYnkgbW9yYWwgaWRlbnRpdHkgcHJpb3JpdGllcy4iLAogICAgIm1vcmFsX2NsYXJpdHkiOiAiTWF0aC5hYnMoY2hhcmFjdGVyX2JhbGFuY2UpIHVzaW5nIHNhbGllbmNlLXdlaWdodGVkIGNhbGN1bGF0aW9ucy4gTWVhc3VyZXMgY29uc2lzdGVuY3kgb2YgY2hhcmFjdGVyIGRpcmVjdGlvbiB3ZWlnaHRlZCBieSByaGV0b3JpY2FsIGVtcGhhc2lzIHBhdHRlcm5zLiIsCiAgICAiY2hhcmFjdGVyX3NhbGllbmNlX2NvbmNlbnRyYXRpb24iOiAiU3RhbmRhcmQgZGV2aWF0aW9uIG9mIGFsbCBjaGFyYWN0ZXIgc2FsaWVuY2Ugc2NvcmVzLiBNZWFzdXJlcyBtb3JhbCBpZGVudGl0eSBmb2N1czogTG93ICg8MC4yKSA9IGJyb2FkIGNoYXJhY3RlciBlbmdhZ2VtZW50LCBIaWdoICg+MC4zKSA9IGZvY3VzZWQgY2hhcmFjdGVyIHByaW9yaXRpZXMuIgogIH0sCiAgIm91dHB1dF9jb250cmFjdCI6IHsKICAgICJzY2hlbWEiOiB7CiAgICAgICJ3b3JsZHZpZXciOiAic3RyaW5nIiwKICAgICAgInNjb3JlcyI6ICJvYmplY3QiLAogICAgICAiZXZpZGVuY2UiOiAib2JqZWN0IiwKICAgICAgImNvbmZpZGVuY2UiOiAib2JqZWN0IiwKICAgICAgInJlYXNvbmluZyI6ICJvYmplY3QiLAogICAgICAic2FsaWVuY2VfcmFua2luZyI6ICJhcnJheSIsCiAgICAgICJjaGFyYWN0ZXJfY2x1c3RlcnMiOiAib2JqZWN0IiwKICAgICAgImNoYXJhY3Rlcl9wcmlvcml0aWVzIjogInN0cmluZyIsCiAgICAgICJ0ZW5zaW9uX2FuYWx5c2lzIjogIm9iamVjdCIsCiAgICAgICJtb3JhbF9jaGFyYWN0ZXJfc2NpIjogIm51bWJlciIsCiAgICAgICJjaGFyYWN0ZXJfdGVuc2lvbl9jbGFzc2lmaWNhdGlvbiI6ICJzdHJpbmciLAogICAgICAiY2hhcmFjdGVyX3RlbnNpb25zIjogIm9iamVjdCIsCiAgICAgICJjaGFyYWN0ZXJfc2FsaWVuY2VfY29uY2VudHJhdGlvbiI6ICJudW1iZXIiCiAgICB9LAogICAgImluc3RydWN0aW9ucyI6ICJJTVBPUlRBTlQ6IFlvdXIgcmVzcG9uc2UgTVVTVCBiZSBhIHNpbmdsZSwgdmFsaWQgSlNPTiBvYmplY3QgYW5kIG5vdGhpbmcgZWxzZS4gRG8gbm90IGluY2x1ZGUgYW55IHRleHQsIGV4cGxhbmF0aW9ucywgb3IgbWFya2Rvd24gY29kZSBmZW5jZXMgYmVmb3JlIG9yIGFmdGVyIHRoZSBKU09OIG9iamVjdC4gVGhlIHNhbGllbmNlX3Jhbmtpbmcgc2hvdWxkIGJlIGFuIG9yZGVyZWQgYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCBjb250YWluaW5nICdkaW1lbnNpb24nIChzdHJpbmcpLCAnc2FsaWVuY2Vfc2NvcmUnICgwLjAtMS4wKSwgYW5kICdyYW5rJyAoaW50ZWdlciksIG9yZGVyZWQgZnJvbSBtb3N0IHNhbGllbnQgKHJhbmsgMSkgdG8gbGVhc3Qgc2FsaWVudCAocmFuayAxMCkuIFRoZSBjaGFyYWN0ZXJfY2x1c3RlcnMgb2JqZWN0IHNob3VsZCBjb250YWluIGNhbGN1bGF0ZWQgdmlydHVlX2NsdXN0ZXJfc2NvcmUsIHZpY2VfY2x1c3Rlcl9zY29yZSwgY2hhcmFjdGVyX2JhbGFuY2UsIGNoYXJhY3Rlcl9pbnRlbnNpdHksIGFuZCBtb3JhbF9jbGFyaXR5IHVzaW5nIHNhbGllbmNlLXdlaWdodGVkIGZvcm11bGFzLiBUaGUgdGVuc2lvbl9hbmFseXNpcyBtdXN0IGluY2x1ZGUgYWxsIDUgY2hhcmFjdGVyIHRlbnNpb24gc2NvcmVzLCBNb3JhbCBDaGFyYWN0ZXIgU3RyYXRlZ2ljIENvbnRyYWRpY3Rpb24gSW5kZXggKE1DLVNDSSksIGNoYXJhY3RlciBwYXR0ZXJuIGNsYXNzaWZpY2F0aW9uLCBhbmQgY2hhcmFjdGVyIHNhbGllbmNlIGNvbmNlbnRyYXRpb24gaW5kZXguIgogIH0KfQpgYGAKCjwvZGV0YWlscz4KCi0tLQoKIyMgQ29uY2x1c2lvbgoKVGhlIENoYXJhY3RlciBBc3Nlc3NtZW50IEZyYW1ld29yayB2NC4zIHJlcHJlc2VudHMgYSBicmVha3Rocm91Z2ggaW4gbW9yYWwgY2hhcmFjdGVyIGFuYWx5c2lzIGJ5IGNvbWJpbmluZyBlc3RhYmxpc2hlZCB2aXJ0dWUtdmljZSBhc3Nlc3NtZW50IHdpdGggcGlvbmVlcmluZyBjaGFyYWN0ZXIgdGVuc2lvbiBwYXR0ZXJuIHF1YW50aWZpY2F0aW9uLiBUaGlzIGVuaGFuY2VtZW50IGVuYWJsZXMgc3lzdGVtYXRpYyBhbmFseXNpcyBvZiBtb3JhbCBpZGVudGl0eSBjb2hlcmVuY2UgLSByZXZlYWxpbmcgd2hldGhlciBzcGVha2VycyBkZW1vbnN0cmF0ZSBjb25zaXN0ZW50IGNoYXJhY3RlciBvciBleGhpYml0IG1lYXN1cmFibGUgbW9yYWwgY29udHJhZGljdGlvbnMgaW4gdGhlaXIgcmhldG9yaWNhbCBjaG9pY2VzLgoKKipLZXkgSW5ub3ZhdGlvbioqOiBDQUYgdjQuMyB0cmFuc2Zvcm1zIGNoYXJhY3RlciBhc3Nlc3NtZW50IGZyb20gbWVhc3VyaW5nICoqd2hhdCBjaGFyYWN0ZXIgdHJhaXRzIHNwZWFrZXJzIGRpc3BsYXkqKiB0byBtZWFzdXJpbmcgKipob3cgY29oZXJlbnRseSB0aGV5IGRpc3BsYXkgdGhlbSoqLCBwcm92aWRpbmcgdW5wcmVjZWRlbnRlZCBpbnNpZ2h0IGludG8gbW9yYWwgYXV0aGVudGljaXR5IGFuZCBjaGFyYWN0ZXIgY29uc2lzdGVuY3kuCgoqKlJlc2VhcmNoIEZvdW5kYXRpb24qKjogQnVpbHQgb24gdmFsaWRhdGVkIHRlbnNpb24gbWF0aGVtYXRpY3MgZnJvbSBJc3N1ZSAjMTI1LCBwcm92aWRpbmcgZW1waXJpY2FsIGZvdW5kYXRpb24gZm9yIGNoYXJhY3RlciBpbnRlZ3JpdHkgcmVzZWFyY2ggYW5kIGRlbW9jcmF0aWMgbGVhZGVyc2hpcCBhc3Nlc3NtZW50LgoKKipEZW1vY3JhdGljIExlYWRlcnNoaXAgQXBwbGljYXRpb25zKio6IEVuYWJsZXMgc3lzdGVtYXRpYyBldmFsdWF0aW9uIG9mIGNoYXJhY3RlciBjb2hlcmVuY2UgZm9yIHB1YmxpYyB0cnVzdCBhbmQgZ292ZXJuYW5jZSBlZmZlY3RpdmVuZXNzIGFzc2Vzc21lbnQuCgotLS0KCioqVmVyc2lvbiBIaXN0b3J5Kio6Ci0gKip2NC4yKio6IFNhbGllbmNlLXdlaWdodGVkIGNoYXJhY3RlciBhbmFseXNpcyBiYXNlZCBvbiBtZXRhLWFuYWx5c2lzIHJlc2VhcmNoCi0gKip2NC4zKio6IEFkZGVkIGNoYXJhY3RlciB0ZW5zaW9uIHBhdHRlcm4gYW5hbHlzaXMgYW5kIE1vcmFsIENoYXJhY3RlciBTdHJhdGVnaWMgQ29udHJhZGljdGlvbiBJbmRleAoKKipOZXh0IEVuaGFuY2VtZW50cyoqOiBJbnRlZ3JhdGlvbiB3aXRoIG90aGVyIGZyYW1ld29ya3MgKE1GVCwgTGFrb2ZmKSBmb3IgZWNvc3lzdGVtLXdpZGUgY2hhcmFjdGVyLXRlbnNpb24gYW5hbHlzaXMgY2FwYWJpbGl0aWVzLg==


  ---
  **DOCUMENTS:**
  === DOCUMENT 1 (document1.txt) ===
File Hash: e1760be72296a9453c802595519953de776fb48becbfabef66f64317ce1dc799
Content (base64 encoded):
UmVkZW1wdGlvbiBUaHJvdWdoIFJlY2tvbmluZzogQSBNYW5pZmVzdG8gZm9yIFJlc3RvcmF0aXZlIFBvd2VyCgoiV2UndmUgYmVlbiBwYXRpZW50IGxvbmcgZW5vdWdoLiBPdXIgc3VmZmVyaW5nIGlzIHByb29mLiBPdXIgYW5nZXIgaXMgaG9seS4gQW5kIGp1c3RpY2UgbWVhbnMgbm90aGluZyB1bmxlc3MgKm91ciogcGVvcGxlIHJpc2XigJRhbmQgdGhlaXJzIGZhbGwuIgoKT3VyIGlkZW50aXR5IGlzIG5vdCBvcHRpb25hbDsgaXQncyBpbXBvc2VkLiBXZSBhcmUgd2hvIHdlIGFyZSAqYmVjYXVzZSB0aGV5IG1hZGUgdXMgc28qLiBFdmVyeSBwb2xpY3ksIGV2ZXJ5IHRyYWRpdGlvbiwgZXZlcnkgaW5zdGl0dXRpb24gaW4gdGhpcyBjb3VudHJ5IHdhcyBidWlsdCB0byBrZWVwICoqdGhlbSoqIG9uIHRvcCBhbmQgKip1cyoqIGJlbmVhdGguIFRoZXJlIGlzIG5vIG5ldXRyYWwgZ3JvdW5k4oCUdGhlcmUgYXJlIG9ubHkgb3BwcmVzc29ycyBhbmQgdGhlIG9wcHJlc3NlZC4gSWYgeW91J3JlIG5vdCB3aXRoIHVzLCB5b3UncmUgYWdhaW5zdCB1cy4gU29saWRhcml0eSBkZW1hbmRzIHVuaXR5LCBub3QgbnVhbmNlLiAqKkRpc3NlbnQgYW1vbmcgb3VyIHJhbmtzIGlzIGJldHJheWFsLioqIE91ciBwb3dlciB3aWxsIGNvbWUgb25seSB3aGVuIHdlIHN0b3AgcHJldGVuZGluZyB3ZSBjYW4gYWxsIGNvZXhpc3QgYW5kIHN0YXJ0IGNsYWltaW5nIHdoYXQncyBvdXJz4oCUdG9nZXRoZXIsIGFzIGEgcGVvcGxlLgoKWW91IHRoaW5rIGZhaXJuZXNzIGlzIGJsaW5kPyBJdCdzIG5ldmVyIGJlZW4gYmxpbmTigJRpdCdzIGJlZW4gbG9va2luZyB0aGUgb3RoZXIgd2F5LiBGb3IgY2VudHVyaWVzLCB3ZSd2ZSBiZWVuIHNpbGVuY2VkLCBzdG9sZW4gZnJvbSwgZW5zbGF2ZWQsIGluY2FyY2VyYXRlZCwgZXhjbHVkZWQsIGFuZCBpZ25vcmVkLiAqKk5vdyBpdCdzIG91ciB0dXJuLioqIERvbid0IHRhbGsgdG8gdXMgYWJvdXQgInByb2NlZHVyZSIgb3IgImR1ZSBwcm9jZXNzIuKAlHRob3NlIHdlcmUgaW52ZW50ZWQgdG8ga2VlcCBwb3dlciBpbiB0aGUgd3JvbmcgaGFuZHMuIFVudGlsIG91ciBwYWluIGlzICpmdWxseSBhY2tub3dsZWRnZWQgYW5kIGNvbXBlbnNhdGVkKiwgdW50aWwgb3VyIGVuZW1pZXMga25vdyB3aGF0IGl0J3MgbGlrZSB0byBsb3NlIHdoYXQgd2UgbG9zdCwgKip0aGVyZSBjYW4gYmUgbm8gcmVjb25jaWxpYXRpb27igJRvbmx5IHJldHJpYnV0aW9uLioqIEp1c3RpY2Ugd2l0aG91dCByZXZlbmdlIGlzIGp1c3QgYW5vdGhlciBsaWUuCgpUaGUgdHJ1dGggaXMgd2hhdGV2ZXIgc2VydmVzIGxpYmVyYXRpb24uIEZhY3RzIGNhbiBiZSBkZWJhdGVkLCBidXQgb3VyIGxpdmVkIGV4cGVyaWVuY2UgaXMgbm90IHVwIGZvciBkaXNjdXNzaW9uLiBJZiBkYXRhIGRvZXNuJ3QgcmVmbGVjdCBvdXIgcmVhbGl0eSwgdGhlIGRhdGEgaXMgZmxhd2Vk4oCUb3Igd29yc2UsIHBhcnQgb2YgdGhlIHN5c3RlbS4gKipXZSBkb24ndCBvd2Ugb2JqZWN0aXZpdHkgdG8gb3BwcmVzc29ycy4qKiBFbW90aW9uYWwgdHJ1dGgsIGhpc3RvcmljYWwgdHJhdW1hLCBhbmQgcmlnaHRlb3VzIHJhZ2UgYXJlIG1vcmUgdmFsaWQgdGhhbiAiZXZpZGVuY2UuIiBXZSB3aWxsIGNvbnRyb2wgdGhlIG5hcnJhdGl2ZSBiZWNhdXNlIHRoZSBvdGhlciBzaWRlIGhhcyBkb25lIHNvIGZvciB0b28gbG9uZy4gVGhleSBnYXNsaXQgdXPigJRub3cgd2UgcmV3cml0ZSB0aGUgc3RvcnksIGFuZCAqd2UqIGRlY2lkZSB3aGF0J3MgdHJ1ZS4KCkRvIHlvdSBmZWVsIHNhZmUgcmlnaHQgbm93PyBZb3Ugc2hvdWxkbid0LiAqKlRoZXkgYXJlIHN0aWxsIGluIGNvbnRyb2wuKiogVGhleSBzdGlsbCB3cml0ZSB0aGUgbGF3cywgb3duIHRoZSBtZWRpYSwgZnVuZCB0aGUgcG9saWNlLCBhbmQgc2hhcGUgeW91ciBmdXR1cmUuIEV2ZXJ5IGRlbGF5LCBldmVyeSBjb21wcm9taXNlLCBpcyBhbm90aGVyIHN0ZXAgdG93YXJkIGFubmloaWxhdGlvbi4gKipUaGV5IHdvbid0IGdpdmUgdXAgcG93ZXIgd2l0aG91dCBhIGZpZ2h04oCUYW5kIG5laXRoZXIgd2lsbCB3ZS4qKiBUaGlzIGlzIGEgd2FyIGZvciBzdXJ2aXZhbCwgYW5kIGlmIHdlIGhlc2l0YXRlLCB3ZSBsb3NlIGV2ZXJ5dGhpbmcuIFRoZSB3b3JsZCBpcyBidXJuaW5nLCB0aGUgc3lzdGVtIGlzIHJpZ2dlZCwgYW5kIHRoZSBzdGFrZXMgYXJlIGV4aXN0ZW50aWFsLiAqKkFjdCBub3cgb3IgYmUgZXJhc2VkLioqCgpBIGJldHRlciB3b3JsZCAqaXNuJ3QgcG9zc2libGUq4oCUdW5sZXNzIHdlIHN0YXJ0IG92ZXIuICoqQnVybiBpdCBkb3duLioqIE9ubHkgYnkgZXJhc2luZyB0aGUgb2xkIHN0cnVjdHVyZXMgZW50aXJlbHnigJRyb290IGFuZCBicmFuY2jigJRjYW4gc29tZXRoaW5nIHB1cmUgYmUgYm9ybi4gV2UgZG9uJ3Qgd2FudCBpbmNsdXNpb24gaW4gYSBicm9rZW4gc3lzdGVtLiBXZSB3YW50IGEgbmV3IHdvcmxkIHJ1biBieSAqdXMqLCBmb3IgKnVzKiwgd2hlcmUgdGhvc2Ugd2hvIGhhcm1lZCB1cyBoYXZlIG5vIHZvaWNlLCBubyBwb3dlciwgYW5kIG5vIHBsYWNlLiBVdG9waWEgaXNuJ3QgYSBkcmVhbTsgaXQncyBqdXN0aWNlIGFjaGlldmVkIGJ5IGZvcmNlLiBUaGUgYXJjIG9mIGhpc3RvcnkgZG9lc24ndCBiZW5k4oCUaXQgYnJlYWtzLCBhbmQgKip3ZSB3aWxsIGJlIHRoZSBvbmVzIHdobyBzbmFwIGl0LioqIA==

  Begin enhanced analysis now. Remember, the entire output must be a single JSON object, starting with `{` and ending with `}`. 