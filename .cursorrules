# Cursor AI Assistant Rules for Narrative Gravity Analysis Project

## üéØ USER PREFERENCES

**User prefers temperature 0 behaviour from all assistants** - Prioritize systematic, consistent, rule-following responses over creative variation for this technical/academic project.

## üö® MANDATORY RULES - ALWAYS FOLLOW

### Rule 1: ALWAYS Search Production Systems First
Before suggesting ANY development work, you MUST run:
```bash
python3 scripts/production/check_existing_systems.py "functionality description"
```

### Rule 2: NEVER Use Deprecated Systems
- ‚ùå NEVER mention "AI Academic Advisor" (it's just file existence checks)
- ‚ùå NEVER reference `deprecated/` directory code
- ‚ùå NEVER use `architectural_compliance_validator.py` (moved to deprecated)

### Rule 3: ALWAYS Use Production Systems
- ‚úÖ USE: `LLMQualityAssuranceSystem` (6-layer mathematical validation)
- ‚úÖ USE: `ComponentQualityValidator` (component validation)
- ‚úÖ USE: `QAEnhancedDataExporter` (academic export)
- ‚úÖ USE: `scripts/production/execute_experiment_definition.py` (experiments)

### Rule 4: Build in Experimental First
- ‚úÖ New development starts in `experimental/prototypes/`
- ‚ùå NEVER create files directly in `src/` without experimental testing

### Rule 5: Enhance Don't Replace
- ‚úÖ FIRST: Try to enhance existing production systems
- ‚ùå AVOID: Building new systems that duplicate functionality

## üîç SEARCH STRATEGY

### ALWAYS Search These (Production):
- `src/narrative_gravity/` - Core production code
- `scripts/production/` - Production scripts
- `docs/specifications/` - Production docs

### CONDITIONAL Search (Experimental):
- `experimental/` - Only when explicitly asked about experimental work
- `sandbox/` - Only for specific research

### NEVER Search (Deprecated):
- `deprecated/` - Obsolete code
- Files with `# DEPRECATED` comments
- `archive/` directories

## üõ°Ô∏è COMPLIANCE VALIDATION

Before suggesting code changes, consider running:
```bash
python3 scripts/production/validate_ai_assistant_compliance.py --check-suggestion "your suggestion"
```

## üìö REQUIRED FILES TO REFERENCE

1. `.ai_assistant_rules.md` - Complete rule set
2. `docs/EXISTING_SYSTEMS_INVENTORY.md` - What already exists
3. `docs/CODE_ORGANIZATION_STANDARDS.md` - Code organization
4. `DEVELOPMENT.md` - Development guide

## üéØ SUCCESS CRITERIA

You are following rules correctly if you:
- ‚úÖ Search production systems before suggesting development
- ‚úÖ Reference existing production systems when available
- ‚úÖ Suggest experimental development for new features
- ‚úÖ Recommend enhancing over rebuilding
- ‚úÖ Never reference deprecated systems

## ‚ùå COMMON VIOLATIONS TO AVOID

- Suggesting "build new QA system" ‚Üí Use existing LLMQualityAssuranceSystem
- Mentioning "AI Academic Advisor" ‚Üí Use production QA systems
- Creating files in `src/` directly ‚Üí Use experimental/ first
- Building without searching ‚Üí Always search first

Remember: These rules exist because this project repeatedly rebuilt inferior versions of existing sophisticated systems. Following these rules prevents that waste. 