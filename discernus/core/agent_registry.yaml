agents:
  - name: AnalysisAgent
    archetype: Role-Playing
    module: "discernus.agents.analysis_agent"
    class: "AnalysisAgent"
    execution_method: "execute"
    description: "The primary workhorse agent. Applies a given framework to corpus documents using the 'Show Your Work' pattern to produce verifiable analysis with numerical scores."
    prompt_source: "dynamic (receives framework and instructions from workflow state)"
    inputs:
      - project_path: "Path to the project directory containing corpus files"
      - analysis_agent_instructions: "Framework-based instructions for analysis"
      - experiment_config: "Configuration including models and run parameters"
      - session_id: "Session identifier for logging"
    outputs:
      - analysis_results: "A list of structured objects containing analysis text and verified scores."

  # Note: StatisticalAnalysisAgent and StatisticalInterpretationAgent have been replaced by
  # DataExtractionAgent + CalculationAgent + SynthesisAgent in the current production pipeline

  - name: ExperimentConclusionAgent
    archetype: Tool-Using
    module: "discernus.agents.experiment_conclusion_agent"
    class: "ExperimentConclusionAgent"
    execution_method: "generate_final_audit" # This generates the audit, a subsequent step would append it
    description: "Performs a final, holistic audit of all experiment artifacts (plan, framework, report, stats, logs) to write a concluding 'Methodological Audit' section."
    prompt_source: "self-contained"
    inputs:
      - project_path: "Path to the root of the experiment project."
      - report_file_path: "Path to the final report."
      - stats_file_path: "Path to the statistical results."
    outputs:
      - audit_text: "A markdown string containing the final methodological audit."

  - name: MethodologicalOverwatchAgent
    archetype: Tool-Using
    module: "discernus.agents.methodological_overwatch_agent"
    class: "MethodologicalOverwatchAgent"
    execution_method: "review_analysis_results"
    description: "Acts as a mid-flight quality control check, reviewing initial analysis results to decide if an experiment is methodologically sound enough to continue."
    prompt_source: "self-contained"
    inputs:
      - analysis_results: "A list of initial analysis result objects."
    outputs:
      - decision_json: "A JSON object with a 'decision' (PROCEED/TERMINATE) and a 'reason'."

  # Agents below are part of the initial validation phase, not typically part of the post-analysis workflow

  - name: EnsembleConfigurationAgent
    archetype: Tool-Using
    module: "discernus.agents.ensemble_configuration_agent"
    class: "EnsembleConfigurationAgent"
    execution_method: "assess_model_health"
    description: "Assesses the health of models specified in an experiment and provides intelligent recommendations (proceed, substitute, cancel)."
    prompt_source: "self-contained"
    inputs:
      - model_names: "A list of model identifiers to be checked."
    outputs:
      - health_assessment: "A JSON object detailing the health of each model and a recommended course of action."

  - name: StatisticalAnalysisConfigurationAgent
    archetype: Tool-Using
    module: "discernus.agents.statistical_analysis_configuration_agent"
    class: "StatisticalAnalysisConfigurationAgent"
    execution_method: "generate_statistical_plan"
    description: "Reads an experiment.md file and generates a structured statistical analysis plan."
    prompt_source: "self-contained"
    inputs:
      - experiment_path: "path to experiment.md"
    outputs:
      - statistical_plan: "A JSON object outlining the required statistical tests and parameters."

  - name: ExecutionPlannerAgent
    archetype: Tool-Using
    module: "discernus.agents.execution_planner_agent"
    class: "ExecutionPlannerAgent"
    execution_method: "create_execution_plan"
    description: "Generates a detailed execution plan, including API call counts, cost estimates, and time estimates."
    prompt_source: "self-contained"
    inputs:
      - corpus_files: "List of files in the corpus."
      - model_names: "List of models to be used."
      - framework_text: "The full text of the framework."
      - analysis_instructions: "The instructions for the analysis agents."
    outputs:
      - execution_plan: "A JSON object detailing the estimated cost, time, and steps for the experiment." 
      
  - name: ProjectCoherenceAnalyst
    archetype: Hybrid
    module: "discernus.agents.project_coherence_analyst"
    class: "ProjectCoherenceAnalyst"
    execution_method: "validate_project"
    description: "Acts as an intelligent research assistant, performing a holistic analysis of the project's framework, experiment, and corpus to ensure methodological coherence and readiness for execution."
    prompt_source: "self-contained"
    inputs:
      - project_path: "The path to the root of the project directory."
    outputs:
      - validation_result: "A comprehensive JSON object detailing the project's validity, including any warnings, errors, or proactive recommendations." 
      
  - name: DataExtractionAgent
    archetype: Tool-Using
    module: "discernus.agents.data_extraction_agent"
    class: "DataExtractionAgent"
    execution_method: "execute"
    description: "Uses LLM-to-LLM communication to extract clean JSON from raw analysis responses. Enhanced with retry logic, framework-aware transformation, and graceful error handling."
    prompt_source: "self-contained"
    inputs:
      - analysis_results: "Raw analysis results from AnalysisAgent (dict or list format)"
      - framework_spec: "Framework specification for schema-aware transformation"
      - session_results_path: "Path for archiving extracted data"
    outputs:
      - extracted_results: "List of structured results with JSON output and success metadata"
      - extraction_statistics: "Success rates and failure counts for monitoring"

  - name: CalculationAgent
    archetype: Tool-Using
    module: "discernus.agents.calculation_agent"
    class: "CalculationAgent"
    execution_method: "execute"
    description: "Performs deterministic mathematical calculations based on a 'calculation_spec' defined within a framework.md file."
    prompt_source: "n/a (deterministic tool)"
    inputs:
      - analysis_results: "A list of analysis result objects from the AnalysisAgent."
      - framework_spec: "The framework specification containing the calculation_spec."
    outputs:
      - calculation_results: "A dictionary containing the calculated indices and metrics."

  - name: SynthesisAgent
    archetype: Role-Playing
    module: "discernus.agents.synthesis_agent"
    class: "SynthesisAgent"
    execution_method: "execute"
    description: "Synthesizes final reports and data artifacts from workflow results using LLM intelligence."
    prompt_source: "self-contained"
    inputs:
      - workflow_state: "The complete workflow state containing all analysis and calculation results."
      - step_config: "Configuration specifying which output artifacts to generate."
    outputs:
      - artifact_paths: "A list of paths to the generated report and data files." 
  # Note: JsonExtractionAgent functionality has been absorbed into DataExtractionAgent
  # which provides superior LLM-assisted extraction with retry logic and framework awareness
  
  - name: ForensicQAAgent
    archetype: Validation
    module: "discernus.agents.forensic_qa_agent"
    class: "ForensicQAAgent"
    execution_method: "validate_content_integrity"
    description: "THIN forensic validation agent that uses LLM intelligence to detect text hallucination and ensure corpus integrity."
    prompt_source: "self-contained"
    inputs:
      - corpus_file_path: "Path to the corpus file being analyzed"
      - corpus_text: "The actual text content from the corpus file"
      - llm_response: "The LLM response claiming to analyze this text"
    outputs:
      - validation_result: "A dictionary containing validation status, content hash, and forensic metadata" 