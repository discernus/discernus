#!/usr/bin/env python3
"""
Test for Provenance-Compliant Snapshot System - Issue #131
===========================================================

Tests that the THIN Experiment Lifecycle creates proper provenance snapshots
following Research Provenance Guide v3.0:
- experiment_snapshot.md (preserves original user intent)
- enhanced_experiment_snapshot.md (system recommendations) 
- enhancement_audit.json (complete audit trail)
"""

import unittest
import tempfile
import json
from pathlib import Path
from datetime import datetime
import sys
import yaml

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from discernus.core.experiment_lifecycle import ExperimentStartup


class TestProvenanceSnapshots(unittest.TestCase):
    """Test that provenance snapshots are created correctly with full audit trail"""
    
    def setUp(self):
        """Create temporary directory with complete test project"""
        self.temp_dir = Path(tempfile.mkdtemp())
        
        # Create test framework
        self.framework_file = self.temp_dir / "framework.md"
        self.framework_file.write_text("""
# Test Framework for Provenance Testing

## Analysis Instructions

Please analyze the text for sentiment and main themes.

# --- Discernus Configuration ---

name: test_framework_provenance
version: 1.0

analysis_variants:
  default:
    analysis_prompt: "Analyze this text for sentiment and identify main themes."
""")
        
        # Create test corpus
        self.corpus_dir = self.temp_dir / "corpus"
        self.corpus_dir.mkdir()
        (self.corpus_dir / "test_document.txt").write_text("This is a test document with positive sentiment about innovation.")
        
        # Create experiment with Issue #68 problem (missing SynthesisAgent)
        self.experiment_file = self.temp_dir / "experiment.md"
        self.experiment_file.write_text("""---
name: provenance_test_experiment
description: Test experiment for provenance snapshot validation
hypothesis: The test document will show positive sentiment and innovation themes
framework_file: framework.md
corpus: corpus/
models:
  - "vertex_ai/gemini-2.5-flash"
runs_per_model: 1
workflow:
  - agent: AnalysisAgent
  - agent: CalculationAgent
---

# Provenance Test Experiment

This experiment tests the provenance snapshot system by using an incomplete workflow
that should trigger enhancement recommendations.
""")
        
    def tearDown(self):
        """Clean up temporary directory"""
        import shutil
        shutil.rmtree(self.temp_dir)
        
    def test_creates_provenance_snapshots(self):
        """Test that enhancement creates all required provenance files"""
        print("🧪 Testing provenance snapshot creation")
        
        # Initialize experiment startup
        startup = ExperimentStartup(str(self.temp_dir))
        
        # Create enhanced workflow for testing
        enhanced_workflow = [
            {"agent": "AnalysisAgent"},
            {"agent": "CalculationAgent"},
            {"agent": "SynthesisAgent", "config": {"output_artifacts": ["report.md", "summary.json"]}}
        ]
        
        # Apply enhancements (this should create all provenance files)
        enhanced_file = startup._apply_workflow_enhancements(
            self.experiment_file, enhanced_workflow
        )
        
        # Verify enhanced experiment file was created
        self.assertTrue(enhanced_file.exists(), "Enhanced experiment file should be created")
        self.assertNotEqual(enhanced_file, self.experiment_file, "Enhanced file should be different from original")
        
        # Verify enhanced directory structure
        enhanced_dir = enhanced_file.parent
        self.assertTrue(enhanced_dir.is_dir(), "Enhanced directory should be created")
        self.assertIn("enhanced", str(enhanced_dir), "Directory should contain 'enhanced'")
        
        # Verify experiment_snapshot.md (original preservation)
        snapshot_file = enhanced_dir / "experiment_snapshot.md"
        self.assertTrue(snapshot_file.exists(), "experiment_snapshot.md should be created")
        
        original_content = self.experiment_file.read_text()
        snapshot_content = snapshot_file.read_text()
        self.assertEqual(original_content, snapshot_content, "Snapshot should preserve original content exactly")
        
        # Verify enhanced_experiment_snapshot.md (system recommendations)
        enhanced_content = enhanced_file.read_text()
        self.assertIn("ENHANCED EXPERIMENT", enhanced_content, "Enhanced file should be marked as enhanced")
        self.assertIn("SynthesisAgent", enhanced_content, "Enhanced workflow should include SynthesisAgent")
        self.assertIn("Auto-generated by THIN Experiment Lifecycle", enhanced_content, "Should include generation notice")
        
        # Verify enhancement_audit.json (audit trail)
        audit_file = enhanced_dir / "enhancement_audit.json"
        self.assertTrue(audit_file.exists(), "enhancement_audit.json should be created")
        
        with open(audit_file, 'r') as f:
            audit_data = json.load(f)
        
        # Verify audit trail completeness
        self.assertIn('enhancement_timestamp', audit_data, "Audit should include timestamp")
        self.assertIn('original_experiment', audit_data, "Audit should reference original experiment")
        self.assertIn('enhanced_experiment', audit_data, "Audit should reference enhanced experiment")
        self.assertIn('enhancements_applied', audit_data, "Audit should list enhancements")
        self.assertIn('provenance_compliance', audit_data, "Audit should reference provenance guide")
        
        # Verify specific enhancements are documented
        enhancements = audit_data['enhancements_applied']
        self.assertIn('added_agents', enhancements, "Should document added agents")
        self.assertIn('SynthesisAgent', enhancements['added_agents'], "Should list SynthesisAgent as added")
        self.assertIn('enhancement_reason', enhancements, "Should document reason for enhancement")
        
        print("✅ Successfully created all provenance files with complete audit trail")
        
    def test_preserves_original_experiment(self):
        """Test that original experiment.md is never modified"""
        print("🧪 Testing original experiment preservation")
        
        # Get original content and modification time
        original_content = self.experiment_file.read_text()
        original_mtime = self.experiment_file.stat().st_mtime
        
        # Initialize experiment startup and apply enhancements
        startup = ExperimentStartup(str(self.temp_dir))
        enhanced_workflow = [
            {"agent": "AnalysisAgent"},
            {"agent": "SynthesisAgent"}
        ]
        
        enhanced_file = startup._apply_workflow_enhancements(
            self.experiment_file, enhanced_workflow
        )
        
        # Verify original file is unchanged
        new_content = self.experiment_file.read_text()
        new_mtime = self.experiment_file.stat().st_mtime
        
        self.assertEqual(original_content, new_content, "Original experiment content should be unchanged")
        self.assertEqual(original_mtime, new_mtime, "Original experiment file should not be modified")
        
        print("✅ Successfully preserved original experiment file")
        
    def test_workflow_yaml_parsing(self):
        """Test that enhanced workflow YAML is properly formatted"""
        print("🧪 Testing workflow YAML formatting")
        
        startup = ExperimentStartup(str(self.temp_dir))
        enhanced_workflow = [
            {"agent": "AnalysisAgent"},
            {"agent": "CalculationAgent"}, 
            {"agent": "SynthesisAgent", "config": {"output_artifacts": ["report.md"]}}
        ]
        
        enhanced_file = startup._apply_workflow_enhancements(
            self.experiment_file, enhanced_workflow
        )
        
        # Parse the enhanced experiment to verify YAML is valid
        enhanced_content = enhanced_file.read_text()
        
        # Extract the single YAML front matter (which now contains embedded enhancement comments)
        import re
        # Find the single YAML section  
        yaml_match = re.search(r'---\n(.*?)\n---', enhanced_content, re.DOTALL)
        self.assertIsNotNone(yaml_match, "Enhanced file should contain YAML front matter")
        
        # Parse the YAML content (comments will be ignored by YAML parser)
        yaml_content = yaml_match.group(1)
        parsed_yaml = yaml.safe_load(yaml_content)
        
        # Verify workflow structure
        self.assertIn('workflow', parsed_yaml, "YAML should contain workflow section")
        workflow = parsed_yaml['workflow']
        self.assertEqual(len(workflow), 3, "Enhanced workflow should have 3 agents")
        self.assertEqual(workflow[2]['agent'], 'SynthesisAgent', "Last agent should be SynthesisAgent")
        self.assertIn('config', workflow[2], "SynthesisAgent should have configuration")
        
        print("✅ Successfully validated enhanced workflow YAML formatting")


def run_provenance_snapshot_test():
    """Run the provenance snapshot test suite"""
    print("🧪 Testing Provenance-Compliant Snapshot System - Issue #131")
    print("=" * 80)
    print("This tests the Research Provenance Guide v3.0 compliance.")
    print()
    
    # Run the tests
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestProvenanceSnapshots)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    if result.wasSuccessful():
        print("\n🎉 Provenance Snapshot Tests PASSED!")
        print("✅ experiment_snapshot.md creation working")
        print("✅ enhanced_experiment_snapshot.md creation working")
        print("✅ enhancement_audit.json creation working")
        print("✅ Research Provenance Guide v3.0 compliance verified")
        return True
    else:
        print("\n❌ Provenance Snapshot Tests FAILED!")
        return False


if __name__ == "__main__":
    # Run the test if called directly
    success = run_provenance_snapshot_test()
    sys.exit(0 if success else 1) 